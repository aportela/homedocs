<?php

namespace HomeDocs;

class Mock
{
    public const int DEFAULT_MAX_DOCUMENT_UPDATES = 3;
    public const int DEFAULT_MAX_ATTACHMENTS = 4;
    public const int DEFAULT_MAX_NOTES = 2;

    private ?string $userId = null;
    private int $maxDocumentUpdatesCount = 0;
    private int $maxDocumentAttachmentsCount = 0;
    private int $maxDocumentNotes = 0;

    /**
     * @var array<string,string>
     */
    private array $documentTemplates = [
        'Gas installation invoice' => 'Provider GasCo, date %s',
        'Home electricity receipt' => 'Company ElecPower, date %s',
        'Home insurance policy' => 'Company Home Insurance, issued on %s',
        'Appliance repair invoice' => 'Service HomeFix, date %s',
        'Internet payment proof' => 'Provider NetCom, paid on %s',
        'Home water receipt' => 'Company AquaPlus, date %s',
        'Cleaning service contract' => 'Company CleanHome, signed on %s',
        'Home gas receipt' => 'Company GasCo, date %s',
        'Commercial electricity invoice' => 'Provider Electra, issued on %s',
        'Housing rental invoice' => 'Landlord Juan Pérez, date %s',
        'Equipment purchase invoice' => 'Provider TechSupplies, issued on %s',
        'Office rental receipt' => 'Real Estate Alfa, payment date %s',
        'Administrative employment contract' => 'Company Solutions S.A., signed on %s',
        'Company insurance policy' => 'Insurance Company Global, contracted on %s',
        'Supplier payment proof' => 'Provider FastTech, made on %s',
        'Annual tax declaration' => 'Company XYZ, filed on %s',
        'Company financial report' => 'Generated by the Accounting Department, month of %s',
        'Company incorporation deed' => 'Signed on %s, official registry',
        'Employee payment receipt' => 'Paid on %s to all employees',
        'IT services provider invoice' => 'Provider SoftWareTech, issued on %s',
        'Office lease contract' => 'Signed on %s with Real Estate Vega',
        'Financial audit report' => 'Prepared by Auditors Corp, date %s',
        'Annual business services receipt' => 'Issued on %s by TechSolution S.A.',
        'Corporate meeting minutes' => 'Held on %s with the board of directors',
        'Company tax certification' => 'Issued by the Tax Agency, %s',
        'Employee performance evaluation' => 'Conducted on %s, by Human Resources',
        'Income tax payment proof' => 'Payment made on %s, company ABC S.A.',
        'Annual sales report' => 'Generated by the commercial department, end of year %s',
        'Home appliance warranty' => 'Provider HomeAppliance Co, issued on %s',
        'Tenant lease agreement' => 'Signed by tenant and landlord on %s',
        'Service contract home repair' => 'Company HomeFix, contracted on %s',
        'Utility payment receipt' => 'Provider City Utilities, paid on %s',
        'Home renovation invoice' => 'Renovation Inc., completed on %s',
        'Energy audit report' => 'Conducted by GreenEnergy, completed on %s',
        'Vehicle insurance policy' => 'Insurance Co. AutoSecure, effective from %s',
        'Property tax receipt' => 'Issued by local tax authority, %s',
        'Business partnership agreement' => 'Signed on %s by all partners',
        'Corporate event invitation' => 'Invitation sent on %s to partners',
        'Income statement for business' => 'Generated by accounting on %s',
        'Employee benefits enrollment' => 'Completed by HR on %s',
        'Real estate purchase agreement' => 'Signed on %s with Real Estate Co.',
        'Supplier invoice for IT services' => 'Received from TechSupport Co, dated %s',
        'Annual audit report for company' => 'Prepared by AuditPartners, completed on %s',
        'Business license renewal notice' => 'Issued on %s by the municipal authority',
        'Client contract for IT services' => 'Signed with Client Co, on %s',
        'Employee training certificate' => 'Issued by HR department, on %s',
        'Tax exemption certificate for company' => 'Issued by tax authority on %s',
        'Legal advisory service agreement' => 'Signed with LegalCorp on %s',
        'IT infrastructure upgrade plan' => 'Prepared on %s by IT department',
        'Annual product warranty' => 'Issued by SupplierTech, valid until %s',
        'Consulting services invoice' => 'Provider ConsultantCo, paid on %s',
        'Purchase order for office equipment' => 'Order placed with OfficeTech on %s',
        'Annual financial statement' => 'Generated by finance department, year %s',
        'Workplace safety inspection report' => 'Conducted by SafeWorks on %s'
    ];

    /**
     * @var array<string,string>
     */
    private array $notesTemplates = [
        'Invoice' => 'Verification of invoice payment. Confirmed that the amount is correct.',
        'Receipt' => 'Reviewed receipt rates. Confirmed that they are correct.',
        'Insurance Policy' => 'Confirmation of the issuance of the insurance policy.',
        'Contract' => 'Contract signed by both parties. Verified that all terms are clear.',
        'Report' => 'Report reviewed and approved. No further changes.',
        'Payment Proof' => 'Verification of payment made. All details match the transaction.',
        'Notification' => 'The customer was notified about the pending invoice payment.',
        'Minutes' => 'Minutes signed by attendees, with all agreed points.',
        'Return' => 'Return verification processed. Confirmed that the product has been returned correctly.',
        'Request' => 'Request reviewed and approved, pending final confirmation.',
        'Budget' => 'Budget approved, proceed with the purchase.',
        'Tax Declaration' => 'Tax declaration filed and approved by the accounting department.',
        'Quotation' => 'Quotation reviewed and approved. Proceed with client confirmation.',
        'Delivery Note' => 'Delivery note verified. Items delivered as per the order.',
        'Purchase Order' => 'Purchase order confirmed and processed. Items to be purchased.',
        'Invoice Correction' => 'Invoice correction made. Amount and details updated as per the agreement.',
        'Payment Request' => 'Payment request submitted for approval. Awaiting final confirmation.',
        'Purchase Receipt' => 'Purchase receipt verified. Confirmed that the transaction is complete.',
        'Work Report' => 'Work report submitted and approved. No further actions required.',
        'Meeting Minutes' => 'Meeting minutes prepared and approved. All decisions documented.',
        'Employment Contract' => 'Employment contract signed. Terms and conditions confirmed.',
        'Tax Invoice' => 'Tax invoice reviewed and approved by the tax department.',
        'Insurance Claim' => 'Insurance claim processed. Awaiting approval from the insurance company.',
        'Loan Agreement' => 'Loan agreement signed by both parties. Terms and interest rates confirmed.',
        'Bank Statement' => 'Bank statement reviewed. All transactions verified and correct.',
        'Service Contract' => 'Service contract signed. Service terms confirmed and agreed upon.',
        'Termination Notice' => 'Termination notice sent. All legal requirements fulfilled.',
        'Refund' => 'Refund processed and confirmed. Payment returned to the customer.',
        'Project Plan' => 'Project plan reviewed and approved. Ready for execution.',
        'Salary Slip' => 'Salary slip generated and verified. Payment details correct.',
        'Audit Report' => 'Audit report completed. No discrepancies found.',
        'Employee Evaluation' => 'Employee evaluation completed. Feedback provided for improvements.',
        'Insurance Receipt' => 'Insurance receipt issued and verified. Policy active.',
        'Credit Report' => 'Credit report reviewed. Client’s creditworthiness confirmed.',
        'Lease Agreement' => 'Lease agreement signed. All terms agreed upon by both parties.',
        'Annual Report' => 'Annual report completed and approved. Ready for publication.',
        'Purchase Agreement' => 'Purchase agreement signed. Terms and payment schedule confirmed.',
        'Health Insurance Policy' => 'Health insurance policy issued and reviewed. Coverage details clear.',
        'Employment Certificate' => 'Employment certificate issued for the employee.',
        'Property Title' => 'Property title confirmed and documented. Ownership transferred.',
        'Shareholder Agreement' => 'Shareholder agreement signed. All shareholders’ rights and obligations confirmed.',
        'Construction Permit' => 'Construction permit granted. Work can proceed.',
        'Legal Notice' => 'Legal notice sent to the client. Awaiting response.',
        'Maintenance Report' => 'Maintenance report completed. All equipment functioning well.',
        'Sales Report' => 'Sales report completed. Trends analyzed and summarized.',
        'Expense Report' => 'Expense report reviewed and approved. Reimbursement processed.',
        'Product Manual' => 'Product manual created and approved. Ready for distribution.',
        'Non-Disclosure Agreement' => 'Non-disclosure agreement signed by all parties.',
        'Employee Handbook' => 'Employee handbook reviewed and updated. New policies included.',
        'Client Agreement' => 'Client agreement signed. Terms confirmed for the project.',
        'Warranty Certificate' => 'Warranty certificate issued for the product. Coverage details clear.',
    ];


    /**
     * @var array<string>
     */
    private array $attachments = [
        "invoice.pdf",
        "electricity_invoice.pdf",
        "gas_invoice.pdf",
        "rental_receipt.pdf",
        "purchase_receipt.pdf",
        "employment_contract.pdf",
        "sales_contract.pdf",
        "financial_report.docx",
        "sales_report.docx",
        "life_insurance_policy.pdf",
        "car_insurance_policy.pdf",
        "meeting_minutes.pdf",
        "legal_document.docx",
        "email_notification.pdf",
        "communication_letter.pdf",
        "income_tax_declaration_2023.pdf",
        "corporate_tax_declaration.pdf",
        "construction_budget.pdf",
        "service_budget.pdf",
        "employment_certificate.pdf",
        "registration_certificate.pdf",
        "bank_account_statement.pdf",
        "credit_card_statement.pdf",
        "privacy_policy.pdf",
        "company_policy.pdf",
        "user_manual.pdf",
        "employee_manual.pdf",
        "security_protocol.docx",
        "strategic_action_plan.pdf",
        "business_plan.docx",
        "collaboration_agreement.pdf",
        "personal_file.pdf",
        "credit_application.pdf",
        "audit_report.pdf",
        "sales_report_january.pdf",
        "credit_risk_report.docx",
        "pension_plan.pdf",
        "software_license.pdf",
        "economic_report.docx",
        "building_construction_budget.pdf",
        "debt_certificate.pdf",
        "tax_payment_receipt.pdf",
        "employee_performance_evaluation.pdf"
    ];

    public function __construct(string $userId, int $maxDocumentUpdatesCount = self::DEFAULT_MAX_DOCUMENT_UPDATES, int $maxDocumentAttachmentsCount = self::DEFAULT_MAX_ATTACHMENTS, int $maxDocumentNotes = self::DEFAULT_MAX_NOTES)
    {
        $this->userId = $userId;
        $this->maxDocumentUpdatesCount = $maxDocumentUpdatesCount;
        $this->maxDocumentAttachmentsCount = $maxDocumentAttachmentsCount;
        $this->maxDocumentNotes = $maxDocumentNotes;
    }

    /**
     * @return array<string>
     */
    private function extractKeywords(string $text): array
    {
        $text = mb_strtolower($text);
        $text = preg_replace('/[^a-záéíóúöñ0-9\s]/', '', $text);
        $words = explode(' ', $text);
        $keywords = array_filter($words, function ($word) {
            return mb_strlen($word) > 4 && mb_strlen($word) < 10;
        });
        return array_values($keywords);
    }

    /**
     * @return array<string>
     */
    private function generateTagsFromDocument(string $title, string $description, int $max)
    {
        $tags = [];
        $keywords = array_merge($this->extractKeywords($title), $this->extractKeywords($description));
        $tags = array_merge($tags, $keywords);
        $tags = array_filter($tags);
        $tags = array_unique($tags);
        shuffle($tags);
        return array_slice($tags, 0, mt_rand(1, $max));
    }

    private function generateNoteBody(string $title): string
    {
        foreach ($this->notesTemplates as $key => $note) {
            if (mb_strpos($title, mb_strtolower($key)) !== false) {
                return $note;
            }
        }
        return 'Autogenerated note body.';
    }

    /**
     * @return array<string>
     */
    public function getQueries(): array
    {
        $queries = [];

        $documentId = \HomeDocs\Utils::uuidv4();

        $creationTimestamp = mt_rand(
            strtotime('-5 years'),
            strtotime('-1 day')
        );

        $title = array_rand($this->documentTemplates);

        $queries[] = sprintf(
            'INSERT INTO DOCUMENT (id, title, description) VALUES("%s", "%s", "%s");',
            $documentId,
            $title,
            sprintf($this->documentTemplates[$title], date('d-m-Y', $creationTimestamp))
        );

        $queries[] = sprintf('INSERT INTO DOCUMENT_HISTORY (document_id, ctime, operation_type, cuid) VALUES("%s", %d, 1, "%s");', $documentId, $creationTimestamp * 1000, $this->userId);

        $documentUpdatesCount = mt_rand(0, $this->maxDocumentUpdatesCount);
        for ($j = 0; $j < $documentUpdatesCount; $j++) {
            $queries[] = sprintf(
                'INSERT INTO DOCUMENT_HISTORY (document_id, ctime, operation_type, cuid) VALUES("%s", %d, 2, "%s");',
                $documentId,
                mt_rand($creationTimestamp + (10 * 60), $creationTimestamp + (5 * 24 * 60 * 60)) * 1000,
                $this->userId
            );
        }

        $tags = $this->generateTagsFromDocument($title, $this->documentTemplates[$title], 5);
        $tags[] = date('Y', $creationTimestamp);
        $tags = array_unique($tags);
        foreach ($tags as $tag) {
            if (strlen($tag) > 3) {
                $queries[] = sprintf(
                    'INSERT INTO DOCUMENT_TAG (document_id, tag) VALUES("%s", "%s");',
                    $documentId,
                    $tag
                );
            }
        }

        $documentNotesCount = mt_rand(0, $this->maxDocumentNotes);
        for ($j = 0; $j < $documentNotesCount; $j++) {
            $queries[] = sprintf(
                'INSERT INTO DOCUMENT_NOTE VALUES("%s", "%s", %d, "%s", "%s");',
                \HomeDocs\Utils::uuidv4(),
                $documentId,
                ($creationTimestamp * 1000) + mt_rand(0, 86400000),
                $this->userId,
                $this->generateNoteBody(mb_strtolower($title))
            );
        }

        shuffle($this->attachments);
        $documentAttachments =  array_slice($this->attachments, 0, mt_rand(1, $this->maxDocumentAttachmentsCount));
        foreach ($documentAttachments as $attachment) {
            $attachmentId = \HomeDocs\Utils::uuidv4();
            $queries[] = sprintf(
                'INSERT INTO ATTACHMENT (id, sha1_hash, name, size, cuid, ctime) VALUES("%s", "%s", "%s", %d, "%s", %d);',
                $attachmentId,
                sha1(\HomeDocs\Utils::uuidv4()),
                $attachment,
                mt_rand(1024, 10485760),
                $this->userId,
                ($creationTimestamp * 1000) + mt_rand(0, 86400000)
            );
            $queries[] = sprintf(
                'INSERT INTO DOCUMENT_ATTACHMENT (document_id, attachment_id) VALUES ("%s", "%s");',
                $documentId,
                $attachmentId
            );
        }
        return $queries;
    }
}
